// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.18 <0.9.0;

contract Name {

    uint public orderCount;

    struct Order { //making new struct for orders
        address client;
        uint pizzaSelection;
        bool delivered;
    }

    mapping(uint => Order) public orders; //creating mapping

    event OrderPlaced(address indexed user, uint indexed orderCount, uint pizzaSelection); //creating event - up to 3 idexes per event
    event Delivered(uint indexed orderNumber); //creating second event

    error PaymentNotEnoughForPizza(address user); //creating custom error
    
    function placeOrder(uint pizzaSelection) public payable returns(uint){
        if(msg.value < 1 ether) {
            revert PaymentNotEnoughForPizza(msg.sender); //msg.sender is the address of the user
        }
        Order memory newOrder = Order(msg.sender, pizzaSelection, false); //new order created using struct variable list
        orderCount++; //order count incremented
        orders[orderCount] = newOrder; //array number of current order after increment is the newOrder
        emit OrderPlaced(msg.sender, orderCount, pizzaSelection); //emit is the keyword for triggering the event to occur //event triggered to track variables on chain
        return orderCount;
    }
    
    function delivered(uint orderNumber) public {
        orders[orderNumber].delivered = true; //???set current order array value to true and assert that its true???
        assert(orders[orderNumber].delivered == true);
        emit Delivered(orderNumber); //event triggered to track ordernumber on chain
    }
} 



